(in-package #:cl-user)

(defpackage #:net.mfiano.lisp.algae.noise.simplex-2d
  (:local-nicknames
   (#:c #:net.mfiano.lisp.algae.noise.common)
   (#:rng #:net.mfiano.lisp.algae.rng)
   (#:u #:net.mfiano.lisp.golden-utils))
  (:use #:cl)
  (:export
   #:sample))

(in-package #:net.mfiano.lisp.algae.noise.simplex-2d)

(u:define-constant +skew-factor+ (/ (1- (sqrt 3d0)) 2))

(u:define-constant +unskew-factor+ (/ (- 3 (sqrt 3d0)) 6))

(u:define-constant +scale+ 45.23065d0)

(u:defun-inline sample (table x y)
  (declare (optimize speed)
           (c:f50 x y))
  (flet ((get-simplex (x y)
           (if (> x y)
               (values 1 0)
               (values 0 1)))
         (noise (hash x y)
           (let* ((s (- 0.5 (* x x) (* y y)))
                  (h (logand hash 7))
                  (u (if (< h 4) x y))
                  (v (if (< h 4) y x))
                  (grad (+ (if (zerop (logand h 1)) u (- u))
                           (if (zerop (logand h 2)) (* v 2) (* v -2)))))
             (if (plusp s)
                 (* (expt s 4) grad)
                 0d0))))
    (u:mvlet* ((s (* (+ x y) +skew-factor+))
               (i (floor (+ x s)))
               (j (floor (+ y s)))
               (tx (* (+ i j) +unskew-factor+))
               (x1 (- x (- i tx)))
               (y1 (- y (- j tx)))
               (i1 j1 (get-simplex x1 y1))
               (x2 (+ (- x1 i1) +unskew-factor+))
               (y2 (+ (- y1 j1) +unskew-factor+))
               (x3 (+ (1- x1) (* +unskew-factor+ 2)))
               (y3 (+ (1- y1) (* +unskew-factor+ 2)))
               (p (the (simple-array u:ub8 (512)) table))
               (g1 (c:pget p i j))
               (g2 (c:pget p (+ i i1) (+ j j1)))
               (g3 (c:pget p (1+ i) (1+ j)))
               (n1 (noise g1 x1 y1))
               (n2 (noise g2 x2 y2))
               (n3 (noise g3 x3 y3)))
      (float (* (+ n1 n2 n3) +scale+) 1f0))))

(defmethod c::%make-sampler-func ((type (eql :simplex-2d)))
  (let ((table (rng:shuffle 'c::rng c:+perlin-permutation+)))
    (lambda (x &optional (y 0d0) z w)
      (declare (ignore z w))
      (sample table x y))))
