(in-package #:net.mfiano.lisp.algae.noise)

;;;; OpenSimplex noise

(u:define-constant +opensimplex-2d/stretch+ (/ (1- (/ (sqrt 3d0))) 2))

(u:define-constant +opensimplex-2d/squish+ (/ (1- (sqrt 3d0)) 2))

(u:define-constant +opensimplex-2d/gradients+
    (make-array 16
                :element-type 'fixnum
                :initial-contents '(5 2 2 5 -5 2 -2 5 5 -2 2 -5 -5 -2 -2 -5))
  :test #'equalp)

(u:define-constant +opensimplex-2d/scale+ (/ (* 47 (/ 2 (sqrt 3d0)))))

(defun opensimplex2d (x y)
  (declare (optimize speed)
           (f50 x y))
  (flet ((extrapolate (xsb ysb dx dy)
           (declare (fixnum xsb ysb)
                    (f50 dx dy))
           (let ((index (logand (pget ysb xsb) 14)))
             (+ (* (aref +opensimplex-2d/gradients+ index) dx)
                (* (aref +opensimplex-2d/gradients+ (1+ index)) dy)))))
    (let* ((stretch (* (+ x y) +opensimplex-2d/stretch+))
           (xs (+ x stretch))
           (ys (+ y stretch))
           (xsb (floor xs))
           (ysb (floor ys))
           (squish (* (+ xsb ysb) +opensimplex-2d/squish+))
           (squish2 (* 2 +opensimplex-2d/squish+))
           (xb (+ xsb squish))
           (yb (+ ysb squish))
           (xins (- xs xsb))
           (yins (- ys ysb))
           (ins (+ xins yins))
           (dx0 (- x xb))
           (dy0 (- y yb))
           (dx1 (- dx0 1 +opensimplex-2d/squish+))
           (dy1 (- dy0 +opensimplex-2d/squish+))
           (dx2 (- dx0 +opensimplex-2d/squish+))
           (dy2 (- dy0 1 +opensimplex-2d/squish+))
           (xsv-ext 0)
           (ysv-ext 0)
           (dx-ext 0d0)
           (dy-ext 0d0)
           (value 0d0))
      (declare (f50 value dx-ext dy-ext))
      (let ((attn1 (- 2 (* dx1 dx1) (* dy1 dy1)))
            (attn2 (- 2 (* dx2 dx2) (* dy2 dy2))))
        (when (plusp attn1)
          (setf attn1 (* attn1 attn1))
          (incf value (* attn1 attn1 (extrapolate (1+ xsb) ysb dx1 dy1))))
        (when (plusp attn2)
          (setf attn2 (* attn2 attn2))
          (incf value (* attn2 attn2 (extrapolate xsb (1+ ysb) dx2 dy2)))))
      (if (<= ins 1)
          (let ((zins (- 1 ins)))
            (if (or (> zins xins) (> zins yins))
                (if (> xins yins)
                    (setf xsv-ext (1+ xsb)
                          ysv-ext (1- ysb)
                          dx-ext (1- dx0)
                          dy-ext (1+ dy0))
                    (setf xsv-ext (1- xsb)
                          ysv-ext (1+ ysb)
                          dx-ext (1+ dx0)
                          dy-ext (1- dy0)))
                (setf xsv-ext (1+ xsb)
                      ysv-ext (1+ ysb)
                      dx-ext (- dx0 1 squish2)
                      dy-ext (- dy0 1 squish2))))
          (let ((zins (- 2 ins)))
            (if (or (< zins xins) (< zins yins))
                (if (> xins yins)
                    (setf xsv-ext (+ xsb 2)
                          ysv-ext ysb
                          dx-ext (- dx0 2 squish2)
                          dy-ext (- dy0 squish2))
                    (setf xsv-ext xsb
                          ysv-ext (+ ysb 2)
                          dx-ext (- dx0 squish2)
                          dy-ext (- dy0 2 squish2)))
                (setf dx-ext dx0
                      dy-ext dy0
                      xsv-ext xsb
                      ysv-ext ysb))
            (incf xsb)
            (incf ysb)
            (setf dx0 (- dx0 1 squish2)
                  dy0 (- dy0 1 squish2))))
      (let ((attn0 (- 2 (* dx0 dx0) (* dy0 dy0)))
            (attn-ext (- 2 (* dx-ext dx-ext) (* dy-ext dy-ext))))
        (when (plusp attn0)
          (setf attn0 (* attn0 attn0))
          (incf value (* attn0 attn0 (extrapolate xsb ysb dx0 dy0))))
        (when (plusp attn-ext)
          (setf attn-ext (* attn-ext attn-ext))
          (incf value (* attn-ext
                         attn-ext
                         (extrapolate xsv-ext ysv-ext dx-ext dy-ext)))))
      (float (* value +opensimplex-2d/scale+) 1f0))))
