(in-package #:net.mfiano.lisp.algae.noise)

;;;; OpenSimplex noise

(u:define-constant +opensimplex-2d/stretch+ (/ (1- (/ (sqrt 3d0))) 2))

(u:define-constant +opensimplex-2d/squish+ (/ (1- (sqrt 3d0)) 2))

(u:define-constant +opensimplex-2d/gradients+
    (let ((data '(5 2 2 5 -5 2 -2 5 5 -2 2 -5 -5 -2 -2 -5)))
      (make-array 16 :element-type 'fixnum :initial-contents data))
  :test #'equalp)

(u:define-constant +opensimplex-2d/scale+ (/ (* 47 (/ 2 (sqrt 3d0)))))

(u:define-constant +opensimplex-3d/stretch+ (/ -6d0))

(u:define-constant +opensimplex-3d/squish+ (/ 3d0))

(u:define-constant +opensimplex-3d/gradients+
    (let ((data '(-11 4 4 -4 11 4 -4 4 11 11 4 4 4 11 4 4 4 11
                  -11 -4 4 -4 -11 4 -4 -4 11 11 -4 4 4 -11 4 4 -4 11
                  -11 4 -4 -4 11 -4 -4 4 -11 11 4 -4 4 11 -4 4 4 -11
                  -11 -4 -4 -4 -11 -4 -4 -4 -11 11 -4 -4 4 -11 -4 4 -4 -11)))
      (make-array 72 :element-type 'fixnum :initial-contents data))
  :test #'equalp)

(u:define-constant +opensimplex-3d/scale+ 103d0)

(u:defun-inline %opensimplex2d (x y)
  (declare (optimize speed)
           (f50 x y))
  (labels ((extrapolate (xsb ysb x y)
             (let ((index (logand (pget ysb xsb) 14)))
               (+ (* (aref +opensimplex-2d/gradients+ index) x)
                  (* (aref +opensimplex-2d/gradients+ (1+ index)) y))))
           (foo (x y xsb ysb)
             (let ((a (- 2 (* x x) (* y y)))
                   (value 0d0))
               (when (plusp a)
                 (setf value (* (expt a 4) (extrapolate xsb ysb x y))))
               value)))
    (let* ((s (* (+ x y) +opensimplex-2d/stretch+))
           (xs (+ x s))
           (ys (+ y s))
           (xsb (floor xs))
           (ysb (floor ys))
           (sqo (* (+ xsb ysb) +opensimplex-2d/squish+))
           (dx0 (- x (+ xsb sqo)))
           (dy0 (- y (+ ysb sqo)))
           (xins (- xs xsb))
           (yins (- ys ysb))
           (ins (+ xins yins))
           (dx1 (- dx0 1 +opensimplex-2d/squish+))
           (dy1 (- dy0 +opensimplex-2d/squish+))
           (dx2 (- dx0 +opensimplex-2d/squish+))
           (dy2 (- dy0 1 +opensimplex-2d/squish+))
           (xsv-ext 0)
           (ysv-ext 0)
           (dx-ext 0d0)
           (dy-ext 0d0)
           (sq2 (* +opensimplex-2d/squish+ 2))
           (value 0d0))
      (incf value (+ (foo dx1 dy1 (1+ xsb) ysb)
                     (foo dx2 dy2 xsb (1+ ysb))))
      (if (<= ins 1)
          (let ((zins (- 1 ins)))
            (if (or (> zins xins) (> zins yins))
                (if (> xins yins)
                    (psetf xsv-ext (1+ xsb)
                           ysv-ext (1- ysb)
                           dx-ext (1- dx0)
                           dy-ext (1+ dy0))
                    (psetf xsv-ext (1- xsb)
                           ysv-ext (1+ ysb)
                           dx-ext (1+ dx0)
                           dy-ext (1- dy0)))
                (psetf xsv-ext (1+ xsb)
                       ysv-ext (1+ ysb)
                       dx-ext (- dx0 1 sq2)
                       dy-ext (- dy0 1 sq2))))
          (let ((zins (- 2 ins)))
            (if (or (< zins xins) (< zins yins))
                (if (> xins yins)
                    (psetf xsv-ext (+ xsb 2)
                           ysv-ext ysb
                           dx-ext (- dx0 2 sq2)
                           dy-ext (- dy0 sq2))
                    (psetf xsv-ext xsb
                           ysv-ext (+ ysb 2)
                           dx-ext (- dx0 sq2)
                           dy-ext (- dy0 2 sq2)))
                (psetf dx-ext dx0
                       dy-ext dy0
                       xsv-ext xsb
                       ysv-ext ysb))
            (incf xsb)
            (incf ysb)
            (setf dx0 (- dx0 1 sq2)
                  dy0 (- dy0 1 sq2))))
      (incf value (+ (foo dx0 dy0 xsb ysb)
                     (foo dx-ext dy-ext xsv-ext ysv-ext)))
      (float (* value +opensimplex-2d/scale+) 1f0))))

(defun opensimplex2d (x y)
  (declare (real x y))
  (%opensimplex2d (float x 1d0) (float y 1d0)))

(defun opensimplex3d (x y z)
  (declare (optimize speed)
           (f50 x y z))
  (labels ((extrapolate (xsb ysb zsb x y z)
             (let ((index (pget zsb ysb xsb)))
               (+ (* (aref +opensimplex-3d/gradients+ index) x)
                  (* (aref +opensimplex-3d/gradients+ (1+ index)) y)
                  (* (aref +opensimplex-3d/gradients+ (+ index 2)) z))))
           (foo (x y z xsb ysb zsb)
             (let ((a (- 2 (* x x) (* y y) (* z z)))
                   (value 0d0))
               (when (plusp a)
                 (setf value (* (expt a 4)
                                (extrapolate xsb ysb zsb x y z))))
               value)))
    (let* ((s (* (+ x y z) +opensimplex-3d/stretch+))
           (xs (+ x s))
           (ys (+ y s))
           (zs (+ z s))
           (xsb (floor xs))
           (ysb (floor ys))
           (zsb (floor zs))
           (sqo (* (+ xsb ysb zsb) +opensimplex-3d/squish+))
           (dx0 (- x (+ xsb sqo)))
           (dy0 (- y (+ ysb sqo)))
           (dz0 (- z (+ zsb sqo)))
           (xins (- xs xsb))
           (yins (- ys ysb))
           (zins (- zs zsb))
           (ins (+ xins yins zins))
           (dx1 (- dx0 1 +opensimplex-3d/squish+))
           (dy1 (- dy0 +opensimplex-3d/squish+))
           (dz1 (- dz0 +opensimplex-3d/squish+))
           (dx2 (- dx0 +opensimplex-3d/squish+))
           (dy2 (- dy0 1 +opensimplex-3d/squish+))
           (dz2 dz1)
           (dx3 dx2)
           (dy3 dy1)
           (dz3 (- dz0 1 +opensimplex-3d/squish+))
           (value 0d0))
      (cond
        ((<= ins 1)
         (let ((ap 1)
               (as xins)
               (bp 2)
               (bs yins)
               (wins 0)
               (xsv-ext0 0)
               (xsv-ext1 0)
               (ysv-ext0 0)
               (ysv-ext1 0)
               (zsv-ext0 0)
               (zsv-ext1 0)
               (dx-ext0 0d0)
               (dx-ext1 0d0)
               (dy-ext0 0d0)
               (dy-ext1 0d0)
               (dz-ext0 0d0)
               (dz-ext1 0d0))
           (cond
             ((and (>= as bs) (> zins bs))
              (psetf bs zins
                     bp 4))
             ((and (< as bs) (> zins as))
              (psetf as zins
                     ap 4)))
           (setf wins (- 1 ins))
           (if (or (> wins as) (> wins bs))
               (let ((c (if (> bs as) bp ap)))
                 (if (zerop (logand c 1))
                     (psetf xsv-ext0 (1- xsb)
                            xsv-ext1 xsb
                            dx-ext0 (1+ dx0)
                            dx-ext1 dx0)
                     (setf xsv-ext0 (1+ xsb)
                           xsv-ext1 xsv-ext0
                           dx-ext0 (1- dx0)
                           dx-ext1 dx-ext0))
                 (if (zerop (logand c 2))
                     (progn
                       (psetf ysv-ext0 ysb
                              ysv-ext1 ysb
                              dy-ext0 dy0
                              dy-ext1 dy0)
                       (if (zerop (logand c 1))
                           (progn
                             (decf ysv-ext1)
                             (incf dy-ext1))
                           (progn
                             (decf ysv-ext0)
                             (incf dy-ext0))))
                     (setf ysv-ext0 (1+ ysb)
                           ysv-ext1 ysv-ext0
                           dy-ext0 (1- dy0)
                           dy-ext1 dy-ext0))
                 (if (zerop (logand c 4))
                     (psetf zsv-ext0 zsb
                            zsv-ext1 (1- zsb)
                            dz-ext0 dz0
                            dz-ext1 (1+ dz0))
                     (setf zsv-ext0 (1+ zsb)
                           zsv-ext1 zsv-ext0
                           dz-ext0 (1- dz0)
                           dz-ext1 dz-ext0)))
               (let ((c (logior ap bp)))
                 (if (zerop (logand c 1))
                     (psetf xsv-ext0 xsb
                            xsv-ext1 (1- xsb)
                            dx-ext0 (- dx0 (* +opensimplex-3d/squish+ 2))
                            dx-ext1 (- (1+ dx0) +opensimplex-3d/squish+))
                     (setf xsv-ext0 (1+ xsb)
                           xsv-ext1 xsv-ext0
                           dx-ext0 (- dx0 1 (* +opensimplex-3d/squish+ 2))
                           dx-ext1 (- dx0 1 +opensimplex-3d/squish+)))
                 (if (zerop (logand c 2))
                     (psetf ysv-ext0 ysb
                            ysv-ext1 (1- ysb)
                            dy-ext0 (- dy0 (* +opensimplex-3d/squish+ 2))
                            dy-ext1 (- (1+ dy0) +opensimplex-3d/squish+))
                     (setf ysv-ext0 (1+ ysb)
                           ysv-ext1 ysv-ext0
                           dy-ext0 (- dy0 1 (* +opensimplex-3d/squish+ 2))
                           dy-ext1 (- dy0 1 +opensimplex-3d/squish+)))
                 (if (zerop (logand c 4))
                     (psetf zsv-ext0 zsb
                            zsv-ext1 (1- zsb)
                            dz-ext0 (- dz0 (* +opensimplex-3d/squish+ 2))
                            dz-ext1 (- (1+ dz0) +opensimplex-3d/squish+))
                     (setf zsv-ext0 (1+ zsb)
                           zsv-ext1 zsv-ext0
                           dz-ext0 (- dz0 1 (* +opensimplex-3d/squish+ 2))
                           dz-ext1 (- dz0 1 +opensimplex-3d/squish+)))))
           (incf value (+ (foo dx0 dy0 dz0 xsb ysb zsb)
                          (foo dx1 dy1 dz1 (1+ xsb) ysb zsb)
                          (foo dx2 dy2 dz2 xsb (1+ ysb) zsb)
                          (foo dx3 dy3 dz3 xsb ysb (1+ zsb))))))
        ((>= ins 2)
         )))))
