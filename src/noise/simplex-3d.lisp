(in-package #:cl-user)

(defpackage #:net.mfiano.lisp.algae.noise.simplex-3d
  (:local-nicknames
   (#:c #:net.mfiano.lisp.algae.noise.common)
   (#:rng #:net.mfiano.lisp.algae.rng)
   (#:u #:net.mfiano.lisp.golden-utils))
  (:use #:cl)
  (:export
   #:sample))

(in-package #:net.mfiano.lisp.algae.noise.simplex-3d)

(u:define-constant +skew-factor+ (/ 3d0))

(u:define-constant +unskew-factor+ (/ 6d0))

(u:define-constant +scale+ 32d0)

(defclass sampler (c:sampler)
  ((%table :reader table
           :initarg :table)))

(u:defun-inline sample (sampler x y z)
  (declare (optimize speed)
           (c:f50 x y z))
  (flet ((get-simplex (x y z)
           (if (>= x y)
               (cond
                 ((>= y z) (values 1 0 0 1 1 0))
                 ((>= x z) (values 1 0 0 1 0 1))
                 (t (values 0 0 1 1 0 1)))
               (cond
                 ((< y z) (values 0 0 1 0 1 1))
                 ((< x z) (values 0 1 0 0 1 1))
                 (t (values 0 1 0 1 1 0)))))
         (noise (hash x y z)
           (let* ((s (- 0.6 (* x x) (* y y) (* z z)))
                  (h (logand hash 15))
                  (u (if (< h 8) x y))
                  (v (case h
                       ((0 1 2 3) y)
                       ((12 14) x)
                       (t z)))
                  (grad (+ (if (zerop (logand h 1)) u (- u))
                           (if (zerop (logand h 2)) v (- v)))))
             (if (plusp s)
                 (* (expt s 4) grad)
                 0d0))))
    (u:mvlet* ((s (* (+ x y z) +skew-factor+))
               (i (floor (+ x s)))
               (j (floor (+ y s)))
               (k (floor (+ z s)))
               (tx (* (+ i j k) +unskew-factor+))
               (x1 (- x (- i tx)))
               (y1 (- y (- j tx)))
               (z1 (- z (- k tx)))
               (i1 j1 k1 i2 j2 k2 (get-simplex x1 y1 z1))
               (x2 (+ (- x1 i1) +unskew-factor+))
               (y2 (+ (- y1 j1) +unskew-factor+))
               (z2 (+ (- z1 k1) +unskew-factor+))
               (x3 (+ (- x1 i2) (* +unskew-factor+ 2)))
               (y3 (+ (- y1 j2) (* +unskew-factor+ 2)))
               (z3 (+ (- z1 k2) (* +unskew-factor+ 2)))
               (x4 (+ (1- x1) (* +unskew-factor+ 3)))
               (y4 (+ (1- y1) (* +unskew-factor+ 3)))
               (z4 (+ (1- z1) (* +unskew-factor+ 3)))
               (p (the (simple-array u:ub8 (512)) (table sampler)))
               (g1 (c:pget p i j k))
               (g2 (c:pget p (+ i i1) (+ j j1) (+ k k1)))
               (g3 (c:pget p (+ i i2)  (+ j j2) (+ k k2)))
               (g4 (c:pget p (1+ i) (1+ j) (1+ k)))
               (n1 (noise g1 x1 y1 z1))
               (n2 (noise g2 x2 y2 z2))
               (n3 (noise g3 x3 y3 z3))
               (n4 (noise g4 x4 y4 z4)))
      (float (* (+ n1 n2 n3 n4) +scale+) 1f0))))

(defmethod c:make-sampler ((type (eql :simplex-3d)) seed)
  (declare (ignore seed))
  (let* ((table (rng:shuffle 'c::rng c:+perlin-permutation+))
         (sampler (make-instance 'sampler :table table)))
    (lambda (x &optional (y 0d0) (z 0d0) (w 0d0))
      (declare (ignore w))
      (sample sampler x y z))))
